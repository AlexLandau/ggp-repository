;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Rubik's Cube
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; ROLE Relations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(role robot)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; INIT Relations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(init (step 0))
;Some random state of my cube (didn't record generating sequence)
;Cubies on the left, positions on the right
(init (cubie yo wo))
(init (cubie bo wg))
(init (cubie wo wr))
(init (cubie yb wb))
(init (cubie gr yb))
(init (cubie wr yr))
(init (cubie yr yg))
(init (cubie go yo))
(init (cubie br bo))
(init (cubie yg br))
(init (cubie wb gr))
(init (cubie wg go))
(init (cubie ygo wbo))
(init (cubie wbr wbr))
(init (cubie ybo wgr))
(init (cubie ybr wgo))
(init (cubie wgr ybo))
(init (cubie ygr ybr))
(init (cubie wgo ygr))
(init (cubie wbo ygo))
(init (cubieorient wb 1))
(init (cubieorient wg 1))
(init (cubieorient wo 1))
(init (cubieorient wr 0))
(init (cubieorient yb 0))
(init (cubieorient yg 0))
(init (cubieorient yo 1))
(init (cubieorient yr 0))
(init (cubieorient bo 1))
(init (cubieorient br 0))
(init (cubieorient go 0))
(init (cubieorient gr 1))
(init (cubieorient wbo wrb))
(init (cubieorient wbr wbr))
(init (cubieorient wgo 0))
(init (cubieorient wgr br))
(init (cubieorient ybo br))
(init (cubieorient ybr wr))
(init (cubieorient ygo wbr))
(init (cubieorient ygr wb))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; LEGAL Relations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(legal robot u)
(legal robot d)
(legal robot l)
(legal robot r)
(legal robot f)
(legal robot b)
(legal robot noop)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; NEXT Relations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(<= (next (cubie ?cubie ?new))
	(true (cubie ?cubie ?old))
	(does robot ?move)
	(after ?move ?old ?new))
(<= (next (cubie ?cubie ?pos))
	(true (cubie ?cubie ?pos))
	(does robot ?move)
	(unaffected ?pos ?move))
(<= (next (cubieorient ?cubie ?new))
	(true (cubieorient ?cubie ?old))
	(true (cubie ?cubie ?oldpos))
	(corner ?cubie)
	(does robot ?move)
	(affected ?oldpos ?move)
	(moveorienteffect ?move ?addition)
	(cornerorientadd ?old ?addition ?new))
(<= (next (cubieorient ?cubie ?new))
	(true (cubieorient ?cubie ?old))
	(true (cubie ?cubie ?oldpos))
	(edge ?cubie)
	(does robot ?move)
	(affected ?oldpos ?move)
	(flip ?old ?new))
;And preserve orientations for unaffected cubies
(<= (next (cubieorient ?cubie ?old))
	(true (cubieorient ?cubie ?old))
	(true (cubie ?cubie ?pos))
	(does robot ?move)
	(unaffected ?pos ?move))
	
(<= (next (step ?np1))
	(true (step ?n))
	(succ ?n ?np1))


(flip 0 1)
(flip 1 0)
;All face colors assume an American-style cube, where white and yellow
;are on opposite sides.
;Changes in a U (up-face, i.e. white-centered face) turn
(after u wbo wbr)
(after u wbr wgr)
(after u wgr wgo)
(after u wgo wbo)
(after u wb wr)
(after u wr wg)
(after u wg wo)
(after u wo wb)
;D is the down face, i.e. yellow-centered face
(after d ybr ybo)
(after d ybo ygo)
(after d ygo ygr)
(after d ygr ybr)
(after d yr yb)
(after d yb yo)
(after d yo yg)
(after d yg yr)
;F is the front face, i.e. red-centered face
(after f wgr wbr)
(after f wbr ybr)
(after f ybr ygr)
(after f ygr wgr)
(after f wr br)
(after f br yr)
(after f yr gr)
(after f gr wr)
;B is the back face, i.e. orange-centered face
(after b wgo ygo)
(after b ygo ybo)
(after b ybo wbo)
(after b wbo wgo)
(after b wo go)
(after b go yo)
(after b yo bo)
(after b bo wo)
;L is the left face; i.e. green-centered face
(after l wgo wgr)
(after l wgr ygr)
(after l ygr ygo)
(after l ygo wgo)
(after l wg gr)
(after l gr yg)
(after l yg go)
(after l go wg)
;R is the right face; i.e. blue-centered face
(after r wbo ybo)
(after r ybo ybr)
(after r ybr wbr)
(after r wbr wbo)
(after r wb bo)
(after r bo yb)
(after r yb br)
(after r br wb)

;Rules for corner orientation
;F and B add wb flips
;U and D add br flips
;L and R add wr flips
(moveorienteffect f wb)
(moveorienteffect b wb)
(moveorienteffect u br)
(moveorienteffect d br)
(moveorienteffect l wr)
(moveorienteffect r wr)
;Then we fill out the arithmetic of the group
;(insofar as we're adding those three elements)
(cornerorientadd 0 wb wb)
(cornerorientadd 0 br br)
(cornerorientadd 0 wr wr)
(cornerorientadd wb wb 0)
(cornerorientadd wb br wbr)
(cornerorientadd wb wr wrb)
(cornerorientadd br wb wrb)
(cornerorientadd br br 0)
(cornerorientadd br wr wbr)
(cornerorientadd wr wb wbr)
(cornerorientadd wr br wrb)
(cornerorientadd wr wr 0)
(cornerorientadd wbr wb wr)
(cornerorientadd wbr br wb)
(cornerorientadd wbr wr br)
(cornerorientadd wrb wb br)
(cornerorientadd wrb br wr)
(cornerorientadd wrb wr wb)

;positions affected by the turns
(<= (affected ?pos ?move)
	(after ?move ?pos ?nextpos))
(<= (unaffected ?pos ?move)
	(cubie ?pos)
	(move ?move)
	(not (affected ?pos ?move)))
(move u)
(move d)
(move l)
(move r)
(move f)
(move b)
(move noop)
(corner wbo)
(corner wbr)
(corner wgo)
(corner wgr)
(corner ybo)
(corner ybr)
(corner ygo)
(corner ygr)
(edge wb)
(edge wg)
(edge wo)
(edge wr)
(edge yb)
(edge yg)
(edge yo)
(edge yr)
(edge bo)
(edge br)
(edge go)
(edge gr)

(<= (cubie ?c)
	(corner ?c))
(<= (cubie ?c)
	(edge ?c))
	

(csuc 0 wbo) ;"Successor" function for the cubies, to iterate over them and count the score
(csuc wbo wbr)
(csuc wbr wgo)
(csuc wgo wgr)
(csuc wgr ybo)
(csuc ybo ybr)
(csuc ybr ygo)
(csuc ygo ygr)
(csuc ygr wb)
(csuc wb wg)
(csuc wg wo)
(csuc wo wr)
(csuc wr yb)
(csuc yb yg)
(csuc yg yo)
(csuc yo yr)
(csuc yr bo)
(csuc bo br)
(csuc br go)
(csuc go gr)

(<= (correct ?cubie)
	(true (cubie ?cubie ?cubie)) ;Right position
	(true (cubieorient ?cubie 0))) ;Right orientation

(correctcount 0 0)
(<= (correctcount ?next ?np5)
	(csuc ?prev ?next)
	(correct ?next)
	(correctcount ?prev ?n)
	(plus5 ?n ?np5))
(<= (correctcount ?next ?n)
	(csuc ?prev ?next)
	(correctcount ?prev ?n)
	(not (correct ?next))
	(plus5 ?n ?np1)) ;Grounding ?n
(<= (totalcorrect ?n)
	(correctcount gr ?n)) 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; TERMINAL Relations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(<= terminal
	(totalcorrect 100))
(<= terminal
	(true (step 20)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GOAL Relations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(<= (goal robot 0)
	(not terminal))
(<= (goal robot ?n)
	terminal
	(totalcorrect ?n))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; View Definitions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


    
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Static Relations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(succ 0 1)
(succ 1 2)
(succ 2 3)
(succ 3 4)
(succ 4 5)
(succ 5 6)
(succ 6 7)
(succ 7 8)
(succ 8 9)
(succ 9 10)
(succ 10 11)
(succ 11 12)
(succ 12 13)
(succ 13 14)
(succ 14 15)
(succ 15 16)
(succ 16 17)
(succ 17 18)
(succ 18 19)
(succ 19 20)
(succ 20 21)
(succ 21 22)
(succ 22 23)
(succ 23 24)
(succ 24 25)
(succ 25 26)
(succ 26 27)
(succ 27 28)
(succ 28 29)
(succ 29 30)
(succ 30 31)
(succ 31 32)
(succ 32 33)
(succ 33 34)
(succ 34 35)
(succ 35 36)
(succ 36 37)
(succ 37 38)
(succ 38 39)
(succ 39 40)
(succ 40 41)
(succ 41 42)
(succ 42 43)
(succ 43 44)
(succ 44 45)
(succ 45 46)
(succ 46 47)
(succ 47 48)
(succ 48 49)
(succ 49 50)
(succ 50 51)
(succ 51 52)
(succ 52 53)
(succ 53 54)
(succ 54 55)
(succ 55 56)
(succ 56 57)
(succ 57 58)
(succ 58 59)
(succ 59 60)
(succ 60 61)
(succ 61 62)
(succ 62 63)
(succ 63 64)
(succ 64 65)
(succ 65 66)
(succ 66 67)
(succ 67 68)
(succ 68 69)
(succ 69 70)
(succ 70 71)
(succ 71 72)
(succ 72 73)
(succ 73 74)
(succ 74 75)
(succ 75 76)
(succ 76 77)
(succ 77 78)
(succ 78 79)
(succ 79 80)
(succ 80 81)
(succ 81 82)
(succ 82 83)
(succ 83 84)
(succ 84 85)
(succ 85 86)
(succ 86 87)
(succ 87 88)
(succ 88 89)
(succ 89 90)
(succ 90 91)
(succ 91 92)
(succ 92 93)
(succ 93 94)
(succ 94 95)
(succ 95 96)
(succ 96 97)
(succ 97 98)
(succ 98 99)
(succ 99 100)
(plus5 0 5)
(plus5 5 10)
(plus5 10 15)
(plus5 15 20)
(plus5 20 25)
(plus5 25 30)
(plus5 30 35)
(plus5 35 40)
(plus5 40 45)
(plus5 45 50)
(plus5 50 55)
(plus5 55 60)
(plus5 60 65)
(plus5 65 70)
(plus5 70 75)
(plus5 75 80)
(plus5 80 85)
(plus5 85 90)
(plus5 90 95)
(plus5 95 100)

(<= (base (cubie ?cubie ?pos))
	(cubie ?cubie)
	(cubie ?pos))
(<= (base (cubieorient ?cubie ?orient))
	(edge ?cubie)
	(flip ?x ?orient))
(<= (base (cubieorient ?cubie ?orient))
	(corner ?cubie)
	(cornerorientadd ?orient ?x ?y))
(<= (base (step ?n))
	(succ ?x ?n))
(base (step 0))
(<= (input robot ?move)
	(move ?move))